// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Category struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Items     []*Item   `json:"items"`
	CreatedAt time.Time `json:"createdAt"`
}

type CreateItemInput struct {
	Name       string `json:"name"`
	CategoryID string `json:"categoryId"`
}

type DeleteItemInput struct {
	ID string `json:"id"`
}

type UpdateItemInput struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	CategoryID string `json:"categoryId"`
}

type Color string

const (
	ColorRed   Color = "RED"
	ColorGreen Color = "GREEN"
	ColorBlue  Color = "BLUE"
)

var AllColor = []Color{
	ColorRed,
	ColorGreen,
	ColorBlue,
}

func (e Color) IsValid() bool {
	switch e {
	case ColorRed, ColorGreen, ColorBlue:
		return true
	}
	return false
}

func (e Color) String() string {
	return string(e)
}

func (e *Color) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Color(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Color", str)
	}
	return nil
}

func (e Color) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
